#include <iostream>
#include <algorithm>
#include <string>
using namespace std;

const int NUM_ROWS = 5, NUM_COLS = 6;
int minRowIdx, minPathLength;
string path[NUM_ROWS][NUM_COLS];

// Computes the cost of every square and fills in the cost matrix.
void computeCosts() {
   static int weights[NUM_ROWS][NUM_COLS] = {{3,4,1,2,8,6},
                                              {6,1,8,2,7,4},
                                              {5,9,3,9,9,5},
                                              {8,4,1,3,2,6},
                                              {3,7,2,8,6,4}};
   static int costs[NUM_ROWS][NUM_COLS] = {};
   
   for (int i = 0; i < NUM_ROWS; ++i) {
      costs[i][0] = weights[i][0]; // Copy the leftmost column of the weight matrix to the cost matrix.
      path[i][0] = to_string(i); // Initialize the leftmost column of the path matrix.
   }
      
   for (int j = 1; j < NUM_COLS; ++j) {                // For each remaining column,
      for (int i = 0; i < NUM_ROWS; ++i) {           // For each square in the column, calculate the cost of each square in the column.
         int up = costs[(i+NUM_ROWS-1)%NUM_ROWS][j-1];    // Calculate the costs of the 3 adjacent squares and find the mininum.
         int left = costs[i%NUM_ROWS][j-1];
         int down = costs[(i+1)%NUM_ROWS][j-1];
         int minCost = min(min(up, left), down);
         
         if (minCost == up)                      // Store the correct numbers in the matrices.
            path[i][j] = path[(i+NUM_ROWS-1)%NUM_ROWS][j-1] + to_string(i);
         else if (minCost == left) 
            path[i][j] = path[i][j-1] + to_string(i);
         else
            path[i][j] = path[(i+1)%NUM_ROWS][j-1] + to_string(i);
         costs[i][j] = minCost + weights[i][j];    // Cost = minimum cost of the 3 adjacent squares + weight of current square.
      }
   }
   minRowIdx = 0, minPathLength = costs[0][NUM_COLS-1];      // Check which square in the rightmost column has the lowest cost.
   for (int i = 1; i < NUM_ROWS; ++i)
      if (costs[i][NUM_COLS-1] < minPathLength)
         minRowIdx = i, minPathLength = costs[i][NUM_COLS-1];
}

int main() {
   computeCosts();
   cout << "The length of the shortest path is " << minPathLength;
   cout << ".\nThe rows of the path from left to right are " << path[minRowIdx][NUM_COLS-1] << ".";

   return 0;
}
